// Задача о замыканиях и области видимости: напишите функцию,
// которая возвращает другую функцию. Внутренняя функция должна иметь доступ к переменной,
// определенной во внешней функции, даже после того, как внешняя функция завершила свое выполнение.

// ==================================================

'use strict'

const exampleFunc = () => {
  const innerVariable = "Hi! I'm inner variable, but";

  const innerFunc = (value) => {
    return `${innerVariable} ${value}`;
  }

  // возвращаем функцию объявленную в локальной области видимости
  return innerFunc;
}

// вызываем функцию и записываем её в переменную
const newVariable = exampleFunc();

console.log(newVariable('Boom!'))
// как работает код:
  // вызываем переменную newVariable (в которой находится результат функции exampleFunc - функция innerFunc)
  // функция innerFunc запомнила своё окружение в момент её создания,
  // при создании у неё появляется внутреннее свойство [[Environment]],
  // оно указывает на объект переменных области видимости, в которой была создана.

  // когда innerFunc вернули из exampleFunc, она унесла с собой свой объект переменных области видимости,
  // поэтому обращаясь к функции в глобальной области видимости, фактически где она и находится
  // она может обратиться к (недоступной другим объектам в глобольной области видимости) объектам.
